@startuml
interface ASTNode {
  +void accept(Visitor visitor)
}

class ProgramNode {
  +List<StatementNode> statements
  +void accept(Visitor visitor)
}

class StatementNode {
  +void accept(Visitor visitor)
}

class PrintStatementNode {
  +ExpressionNode expression
  +void accept(Visitor visitor)
}

class VariableDeclarationNode {
  +String name
  +String type
  +ExpressionNode initializer
  +void accept(Visitor visitor)
}

class AssignmentNode {
  +String name
  +ExpressionNode expression
  +void accept(Visitor visitor)
}

interface ExpressionNode {
  +void accept(Visitor visitor)
}

class LiteralExpressionNode {
  +Object value
  +void accept(Visitor visitor)
}

class VariableExpressionNode {
  +String name
  +void accept(Visitor visitor)
}

class BinaryExpressionNode {
  +ExpressionNode left
  +String operator
  +ExpressionNode right
  +void accept(Visitor visitor)
}

ProgramNode "1" --> "*" StatementNode
StatementNode <|-- PrintStatementNode
StatementNode <|-- VariableDeclarationNode
StatementNode <|-- AssignmentNode

ExpressionNode <|-- LiteralExpressionNode
ExpressionNode <|-- VariableExpressionNode
ExpressionNode <|-- BinaryExpressionNode

PrintStatementNode --> ExpressionNode
VariableDeclarationNode --> ExpressionNode
AssignmentNode --> ExpressionNode
BinaryExpressionNode --> ExpressionNode : left
BinaryExpressionNode --> ExpressionNode : right

ASTNode <|-- ProgramNode
ASTNode <|-- StatementNode
ASTNode <|-- ExpressionNode

@enduml
