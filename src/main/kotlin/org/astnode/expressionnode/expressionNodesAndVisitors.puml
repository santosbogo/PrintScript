@startuml
interface ExpressionNodeVisitor {
    +visitLiteral(node: Literal): Any
    +visitBinaryExpression(node: BinaryExpression): Any
    +visitIdentifier(node: Identifier): Any
}

class EvaluateExpressionNodeVisitor implements ExpressionNodeVisitor {
    +visitLiteral(node: Literal): Any
    +visitBinaryExpression(node: BinaryExpression): Any
    +visitIdentifier(node: Identifier): Any
}

interface ExpressionNode {
    +type: String
    +location: Location
    +accept(visitor: ExpressionNodeVisitor): Any
}

class BinaryExpression implements ExpressionNode {
    +left: ExpressionNode
    +right: ExpressionNode
    +operator: String
    +accept(visitor: ExpressionNodeVisitor): Any
}

class Identifier implements ExpressionNode {
    +name: String
    +dataType: String
    +accept(visitor: ExpressionNodeVisitor): Any
}

class Literal implements ExpressionNode {
    +value: LiteralValue
    +accept(visitor: ExpressionNodeVisitor): Any
}

abstract class LiteralValue {
    +getType(): String
}

class StringValue extends LiteralValue {
    +value: String
    +getType(): String
}

class NumberValue extends LiteralValue {
    +value: Number
    +getType(): String
}

@enduml

